name: example_CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout dépôt
        uses: actions/checkout@v3

      - name: Installer Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # (Optionnel) dépendances sur le runner – utile si tu ajoutes des linters, etc.
      - name: Installer les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Créer fichier .env (Docker)
        run: |
          cat > .env <<'EOF'
          # MySQL
          MYSQL_HOST=mysql
          MYSQL_DB_NAME=store_db
          MYSQL_DATABASE=store_db    # utilisé par l'entrypoint MySQL
          DB_USERNAME=root
          DB_PASSWORD=root
          # MongoDB
          MONGODB_HOST=mongo
          MONGODB_PORT=27017
          MONGODB_DATABASE=store_db
          EOF
          echo "Contenu de .env :"; cat .env

      - name: Build & start services (Docker Compose)
        run: docker compose up -d --build

      - name: Wait for MySQL & ensure DB
        run: |
          docker compose exec -T mysql sh -lc 'until mysqladmin ping -uroot -proot --silent; do sleep 1; done'
          docker compose exec -T mysql sh -lc 'mysql -uroot -proot -e "CREATE DATABASE IF NOT EXISTS store_db;"'

      - name: Copy .env into app container
        run: docker cp .env $(docker compose ps -q store_manager_app):/app/.env

      - name: Check services
        run: docker compose ps

      - name: Run tests
        run: docker compose exec -T store_manager_app pytest -q

      - name: Show logs on failure
        if: failure()
        run: docker compose logs --no-color store_manager_app mysql mongo | tail -n 300
