name: example_CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: store_db
          MYSQL_USER: user
          MYSQL_PASSWORD: pass
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      mongo:
        image: mongo:6
        options: >-
          --health-cmd="echo 'db.runCommand({ping:1}).ok' | mongosh --quiet"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout dépôt
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Créer fichier .env
        run: |
          echo "MYSQL_HOST=mysql" >> .env
          echo "MYSQL_DB_NAME=store_db" >> .env
          echo "DB_USERNAME=user" >> .env
          echo "DB_PASSWORD=pass" >> .env
          echo "MONGODB_HOST=mongo" >> .env
          echo "MONGODB_PORT=27017" >> .env
          echo "MONGODB_DATABASE=store_db" >> .env

      - name: Installer dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Init schema MySQL (filet de sécurité)
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client || sudo apt-get install -y mariadb-client
          for i in {1..6}; do
            mysql -hmysql -uuser -ppass store_db < db-init/init.sql && break
            echo "MySQL pas prêt, retry..."
            sleep 5
          done

      - name: Tests
        run: PYTHONPATH=src pytest -q

  deploy_to_vm:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'  # déploie seulement depuis main
    env:
      SSH_USER: ${{ secrets.SSH_USER }}             # ex: ubuntu
      SSH_HOST: ${{ secrets.SSH_HOST }}             # ex: 203.0.113.10 ou vm.exemple.com (SANS ssh://)
      SSH_PORT: ${{ secrets.SSH_PORT }}             # ex: 22
    steps:
      - name: Checkout dépôt
        uses: actions/checkout@v4

      - name: Préparer la clé SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          CLEAN_HOST="$(printf '%s' "$SSH_HOST" | tr -d '\r' | sed 's/[[:space:]]//g')"
          echo "CLEAN_HOST=$CLEAN_HOST" >> $GITHUB_ENV

      - name: Test SSH (verbose)
        run: |
          set -euxo pipefail
          PORT="${SSH_PORT:-22}"
          ssh -vvv -o StrictHostKeyChecking=accept-new -p "$PORT" \
            "$SSH_USER@$CLEAN_HOST" 'echo "SSH OK"; uname -a'

      - name: Déployer (exemple)
        run: |
          PORT="${SSH_PORT:-22}"
          ssh -o StrictHostKeyChecking=accept-new -p "$PORT" \
            "$SSH_USER@$CLEAN_HOST" \
            'cd /opt/app && docker compose pull && docker compose up -d && docker compose ps'
